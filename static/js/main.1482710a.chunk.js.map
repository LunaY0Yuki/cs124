{"version":3,"sources":["Row.js","ItemList.js","FilterDropUp.js","FilterButton.js","DeleteDropUp.js","DeleteButton.js","Modal.js","App.js","InMemoryApp.js","reportWebVitals.js","index.js"],"names":["Row","props","textarea_ref","useRef","useEffect","isNewItem","current","focus","changeNewItemId","id","className","completed","onChange","onItemChanged","type","checked","value","item_name","e","target","disabled","onBlur","currentTarget","onItemDeleted","onKeyPress","key","preventDefault","newId","onItemAdded","ref","ItemList","useState","newItemId","setNewItemId","renderedList","data","length","renderedData","filterState","filter","map","onClick","FilterDropUp","optionClickedHelper","option_name","onFilterOpClicked","FilterButton","onToolClicked","showDropUp","closeDropUp","DeleteDropUp","onDeleteOpClicked","displayModal","deleteState","DeleteButton","Modal","children","cancelOnClick","confirmOnClick","confirm_button_name","App","toolSelected","setToolSelected","setFilterState","setDeleteState","modalOn","setModalOn","handleToolSelected","tool_name","toolOp","deleteOpName","onDeleteByCategory","toLowerCase","InMemoryApp","initialData","setData","itemID","field","newValue","item","category","generateUniqueID","concat","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1482710a.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\nimport './Row.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nfunction Row(props){\n    const textarea_ref = useRef(null);\n\n    function handleKeypress(e) {\n        //it triggers by pressing the enter key\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            let newId = props.onItemAdded();\n            props.changeNewItemId(newId);\n        }\n    };\n\n    useEffect(() => {\n        // we only want to focus on the text area if it's a new item\n        if (props.isNewItem) {\n            textarea_ref.current.focus();\n            props.changeNewItemId(null);\n        }\n    });\n\n    return (\n        <div id={props.id} className={props.completed ? \"task-item-completed\" : \"task-item-uncompleted\"}>\n            <input onChange={() => {\n                props.onItemChanged(props.id, \"completed\", !props.completed)\n            }} type=\"checkbox\" className=\"check-complete\" checked={props.completed}/>\n            <TextareaAutosize className=\"item-name\" value={props.item_name}\n                              onChange={(e) => props.onItemChanged(props.id, \"item_name\", e.target.value)}\n                              disabled={props.completed}\n                              onBlur={(e) => {\n                                  // delete an item if its name is empty and the user clicks out of it\n                                  if (e.currentTarget.value === \"\") {\n                                      props.onItemDeleted(props.id);\n                                  }\n                              }}\n                              onKeyPress={handleKeypress}\n                              ref={textarea_ref}\n            />\n        </div>\n    );\n}\n\nexport default Row;","import './ItemList.css';\nimport Row from'./Row.js';\nimport {useState} from \"react\";\n\n\n// Define the List component that contain all the items\nfunction ItemList(props){\n    const [newItemId, setNewItemId] = useState(null);\n\n    let renderedList = <p id=\"no-items\">No items to do.</p>;\n\n    if (props.data.length > 0) {\n        let renderedData = props.data;  // when props.filterState === \"all\", so we show all\n\n        if (props.filterState === \"Completed\") {\n            renderedData = props.data.filter((e) => e.completed === true);\n        } else if (props.filterState === \"Uncompleted\") {\n            renderedData = props.data.filter((e) => e.completed === false);\n        }\n\n        renderedList = renderedData.map( e => <Row key={e.id} id={e.id} item_name={e.item_name}\n                                               completed={e.completed}\n                                               onItemChanged={props.onItemChanged}\n                                               onItemDeleted={props.onItemDeleted}\n                                               onItemAdded={props.onItemAdded}\n                                               isNewItem={e.id===newItemId}\n                                               changeNewItemId={(newId) => setNewItemId(newId)}\n            />\n        );\n    }\n\n    return (\n        <div>\n            <div id=\"item_list\">\n                {renderedList}\n            </div>\n            <button id=\"add\" type=\"button\" onClick={()  => {\n                let newId = props.onItemAdded();\n                setNewItemId(newId);\n            }}>+</button>\n        </div>\n    );\n}\n\nexport default ItemList;","import './ToolsButton.css';\n\nfunction FilterDropUp(props){\n    function optionClickedHelper(option_name){\n        props.onFilterOpClicked(option_name);\n    }\n\n    return (\n        <div className=\"dropup-content\">\n            <button onClick={() => optionClickedHelper(\"Completed\")}>\n                Completed {props.filterState === \"Completed\" ? <span>&#10003;</span> : null}\n            </button>\n            <button onClick={() => optionClickedHelper(\"Uncompleted\")}>\n                Uncompleted {props.filterState === \"Uncompleted\" ? <span>&#10003;</span> : null}\n            </button>\n        </div>\n    );\n}\n\nexport default FilterDropUp;","import './ToolsButton.css';\nimport FilterDropUp from \"./FilterDropUp.js\";\n\nfunction FilterButton(props){\n    return (\n        <div className=\"dropup\">\n            <button className=\"accent\" id=\"filter-dropup\" type=\"button\" onClick={props.onToolClicked}>\n                <i className=\"material-icons-outlined md-38\">filter_alt</i>\n            </button>\n            {props.showDropUp && <FilterDropUp onFilterOpClicked={props.onFilterOpClicked}\n                                               filterState = {props.filterState}\n                                               closeDropUp = {props.closeDropUp}/>}\n        </div>\n    );\n}\n\nexport default FilterButton;","import './ToolsButton.css';\n\nfunction DeleteDropUp(props){\n    function optionClickedHelper(option_name){\n        props.onDeleteOpClicked(option_name);\n        props.displayModal();\n    }\n\n    return (\n        <div className=\"dropup-content\">\n\n            <button onClick={() => optionClickedHelper(\"All\")}>\n                All {props.deleteState === \"All\" ? <span>&#10003;</span> : null}\n            </button>\n            <button onClick={() => optionClickedHelper(\"Completed\")}>\n                Completed {props.deleteState === \"Completed\" ? <span>&#10003;</span> : null}\n            </button>\n            <button onClick={() => optionClickedHelper(\"Uncompleted\")}>\n                Uncompleted {props.deleteState === \"Uncompleted\" ? <span>&#10003;</span> : null}\n            </button>\n        </div>\n    );\n}\n\nexport default DeleteDropUp;","import './ToolsButton.css';\nimport DeleteDropUp from './DeleteDropUp.js';\n\nfunction DeleteButton(props){\n    return (\n        <div className=\"dropup\">\n            <button className=\"accent\" id=\"delete-dropup\" type=\"button\" onClick={props.onToolClicked}>\n                <i className=\"material-icons-outlined md-38\">delete_outline</i>\n            </button>\n            {props.showDropUp && <DeleteDropUp displayModal={props.displayModal}\n                                               deleteState={props.deleteState}\n                                               onDeleteOpClicked={props.onDeleteOpClicked}/>}\n        </div>\n    );\n}\n\nexport default DeleteButton;","import './Modal.css';\n\nfunction Modal(props){\n    return (\n        <div className=\"modal\">\n            <div className=\"modal-content\">\n                {props.children}\n                <div id=\"modal-response\">\n                    <button type=\"button\" onClick={props.cancelOnClick}>\n                     Cancel\n                    </button>\n                    <button id=\"confirm-button\" type=\"button\" onClick={props.confirmOnClick}>\n                        {props.confirm_button_name}</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;","import './App.css';\nimport ItemList from \"./ItemList.js\";\nimport FilterButton from \"./FilterButton.js\";\nimport DeleteButton from \"./DeleteButton.js\";\nimport {useState} from \"react\";\nimport Modal from \"./Modal.js\";\n\nfunction App(props) {\n    const [toolSelected, setToolSelected] = useState(null);  // for the drop-up for filter and delete\n    const [filterState, setFilterState] = useState(\"All\");\n    const [deleteState, setDeleteState] = useState(null);\n    const [modalOn, setModalOn] = useState(null);\n\n    function handleToolSelected(tool_name){\n        // if you click on the same tool twice, it will deselect it\n        if (toolSelected === tool_name){\n            setToolSelected(null);\n        } else {\n            setToolSelected(tool_name);\n        }\n    }\n\n    function handleFilterSelected(toolOp){\n        if (filterState === toolOp){\n            setFilterState(\"All\");\n        } else {\n            setFilterState(toolOp);\n        }\n    }\n\n\n    return (\n      <div id=\"content\">\n        <h1 className=\"accent\">To-Do List</h1>\n        <ItemList {...props} filterState = {filterState}/>\n        <div id=\"tools\">\n            <FilterButton onToolClicked={() => {handleToolSelected(\"filter\")}}\n                          showDropUp = {\"filter\" === toolSelected}\n                          onFilterOpClicked={handleFilterSelected}\n                          filterState = {filterState}\n                          closeDropUp = {() => setToolSelected(null)}\n            />\n            <DeleteButton onToolClicked={() => {handleToolSelected(\"delete\")}}\n                          showDropUp = {\"delete\" === toolSelected}\n                          deleteState = {deleteState}\n                          onDeleteOpClicked = {(deleteOpName) => setDeleteState(deleteOpName)}\n                          displayModal={() => {setModalOn(true)}}\n            />\n        </div>\n          {modalOn && <Modal deleteState = {deleteState}\n                             confirm_button_name = \"Delete\"\n                             cancelOnClick = {() => {\n                                 setDeleteState(null);\n                                 setModalOn(false);  // hide the modal\n                             }}\n                             confirmOnClick = {() => {\n                                 props.onDeleteByCategory(deleteState);\n                                 setModalOn(false);  // hide the modal\n                                 setToolSelected(null);   //  reset the toolSelected state, so that the dropUp goes away\n                                 setDeleteState(null);  // reset the deleteState\n                             }\n                             }>\n              <p>Are you sure that you want to delete <b>all {deleteState !== \"All\" ? deleteState.toLowerCase() + \" \": \"\"}</b>tasks?</p>\n          </Modal>}\n      </div>\n  );\n}\n\nexport default App;\n","import {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport App from \"./App.js\";\n\nfunction InMemoryApp(props) {\n    const [data, setData] = useState(props.initialData);\n\n    function handleItemChanged(itemID, field, newValue){\n            setData(data.map(\n                item => item.id !==itemID\n                    ? item\n                    : {...item, [field]: newValue}));\n    }\n\n    function handleItemDeleted(itemID) {\n        setData(data.filter((item) => item.id !== itemID));\n    }\n\n    function handleItemCategoryDeleted(category) {\n        // delete the item based on the category they are in\n        if (category === \"Completed\"){\n            setData(data.filter((item) => item.completed === false));\n        } else if (category === \"Uncompleted\") {\n            setData(data.filter((item) => item.completed === true));\n        } else if (category === \"All\") {\n            setData([]);\n        }\n    }\n\n    function handleItemAdded(){\n        let newId = generateUniqueID();\n        setData(data.concat([{id: newId, name: \"\", completed: false}]));\n        return newId;\n    }\n\n    return (<App data={data} onItemChanged={handleItemChanged}\n                 onItemDeleted={handleItemDeleted}\n                 onDeleteByCategory={handleItemCategoryDeleted}\n                 onItemAdded={handleItemAdded}/>);\n}\n\nexport default InMemoryApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from './InMemoryApp.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nlet initialData = [];\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <InMemoryApp initialData={initialData} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}