{"version":3,"sources":["Row.js","AddButton.js","ItemList.js","FilterDropUp.js","FilterButton.js","DeleteDropUp.js","DeleteButton.js","Modal.js","App.js","InMemoryApp.js","reportWebVitals.js","index.js"],"names":["Row","props","textarea_ref","useEffect","isNewItem","focus","id","className","completed","onChange","onItemChanged","type","checked","value","item_name","e","target","disabled","onBlur","currentTarget","onItemDeleted","ref","tag","AddButton","onClick","addNewItem","ItemList","useState","newItemId","setNewItemId","renderedList","data","length","renderedData","filterState","filter","map","newId","onItemAdded","FilterDropUp","optionClickedHelper","option_name","onFilterOpClicked","FilterButton","onToolClicked","showDropUp","closeDropUp","DeleteDropUp","onDeleteOpClicked","displayModal","deleteState","DeleteButton","Modal","deleteType","resetDeleteOp","hideModal","onDeleteByCategory","resetDeleteDropup","App","toolSelected","setToolSelected","setFilterState","setDeleteState","modalOn","setModalOn","handleToolSelected","tool_name","toolOp","deleteOpName","InMemoryApp","initialData","setData","itemID","field","newValue","item","category","generateUniqueID","newItem","name","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96de3dda.chunk.js","sourcesContent":["import {useEffect} from \"react\";\nimport './Row.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nfunction Row(props){\n    let textarea_ref = null;\n\n    useEffect(() => {\n        // we only want to focus on the text area if it's a new item\n        if (props.isNewItem) {\n            textarea_ref.focus();\n        }\n    });\n\n    return (\n        <div id={props.id} className={props.completed ? \"task-item-completed\" : \"task-item-uncompleted\"}>\n            <input onChange={() => {\n                props.onItemChanged(props.id, \"completed\", !props.completed)\n            }} type=\"checkbox\" className=\"check-complete\" checked={props.completed}/>\n            <TextareaAutosize className=\"item-name\" value={props.item_name}\n                              onChange={(e) => props.onItemChanged(props.id, \"item_name\", e.target.value)}\n                              disabled={props.completed}\n                              onBlur={(e) => {\n                                  // delete an item if its name is empty and the user clicks out of it\n                                  if (e.currentTarget.value === \"\") {\n                                      props.onItemDeleted(props.id);\n                                  }\n                              }}\n                              ref={(tag) => (textarea_ref = tag)}\n            />\n        </div>\n    );\n}\n\nexport default Row;","import './AddButton.css';\n\nfunction AddButton(props){\n    return (\n        <button id=\"add\" type=\"button\" onClick={props.addNewItem}>+</button>\n    );\n}\n\nexport default AddButton;","import './ItemList.css';\nimport Row from'./Row.js';\nimport AddButton from \"./AddButton.js\";\nimport {useState} from \"react\";\n\n// Define the List component that contain all the items\nfunction ItemList(props){\n    const [newItemId, setNewItemId] = useState(null);\n\n    let renderedList = <p id=\"no-items\">No items to do.</p>;\n\n    if (props.data.length > 0) {\n        let renderedData = props.data;  // when props.filterState === \"all\", so we show all\n\n        if (props.filterState === \"Completed\") {\n            renderedData = props.data.filter((e) => e.completed === true);\n        } else if (props.filterState === \"Uncompleted\") {\n            renderedData = props.data.filter((e) => e.completed === false);\n        }\n\n        renderedList = renderedData.map( e => <Row key={e.id} id={e.id} item_name={e.item_name}\n                                               completed={e.completed}\n                                               onItemChanged={props.onItemChanged}\n                                               onItemDeleted={props.onItemDeleted}\n                                               isNewItem={e.id===newItemId} />\n        );\n    }\n\n    return (\n        <div>\n            <div id=\"item_list\">\n                {renderedList}\n            </div>\n            <AddButton addNewItem={()  => {\n                let newId = props.onItemAdded();\n                setNewItemId(newId);\n            }}\n            />\n        </div>\n    );\n}\n\nexport default ItemList;","import './ToolsButton.css';\n\nfunction FilterDropUp(props){\n    function optionClickedHelper(option_name){\n        props.onFilterOpClicked(option_name);\n    }\n\n    return (\n        <div className=\"dropup-content\">\n            <button onClick={() => optionClickedHelper(\"Completed\")}>\n                Completed {props.filterState === \"Completed\" ? <span>&#10003;</span> : null}\n            </button>\n            <button onClick={() => optionClickedHelper(\"Uncompleted\")}>\n                Uncompleted {props.filterState === \"Uncompleted\" ? <span>&#10003;</span> : null}\n            </button>\n        </div>\n    );\n}\n\nexport default FilterDropUp;","import './ToolsButton.css';\nimport FilterDropUp from \"./FilterDropUp.js\";\n\nfunction FilterButton(props){\n    return (\n        <div className=\"dropup\">\n            <button className=\"accent\" id=\"filter-dropup\" type=\"button\" onClick={props.onToolClicked}>\n                <i className=\"material-icons-outlined md-38\">filter_alt</i>\n            </button>\n            {props.showDropUp && <FilterDropUp onFilterOpClicked={props.onFilterOpClicked}\n                                               filterState = {props.filterState}\n                                               closeDropUp = {props.closeDropUp}/>}\n        </div>\n    );\n}\n\nexport default FilterButton;","import './ToolsButton.css';\n\nfunction DeleteDropUp(props){\n    function optionClickedHelper(option_name){\n        props.onDeleteOpClicked(option_name);\n        props.displayModal();\n    }\n\n    return (\n        <div className=\"dropup-content\">\n\n            <button onClick={() => optionClickedHelper(\"All\")}>\n                All {props.deleteState === \"All\" ? <span>&#10003;</span> : null}\n            </button>\n            <button onClick={() => optionClickedHelper(\"Completed\")}>\n                Completed {props.deleteState === \"Completed\" ? <span>&#10003;</span> : null}\n            </button>\n            <button onClick={() => optionClickedHelper(\"Uncompleted\")}>\n                Uncompleted {props.deleteState === \"Uncompleted\" ? <span>&#10003;</span> : null}\n            </button>\n        </div>\n    );\n}\n\nexport default DeleteDropUp;","import './ToolsButton.css';\nimport DeleteDropUp from './DeleteDropUp.js';\n\nfunction DeleteButton(props){\n    return (\n        <div className=\"dropup\">\n            <button className=\"accent\" id=\"delete-dropup\" type=\"button\" onClick={props.onToolClicked}>\n                <i className=\"material-icons-outlined md-38\">delete_outline</i>\n            </button>\n            {props.showDropUp && <DeleteDropUp displayModal={props.displayModal}\n                                               deleteState={props.deleteState}\n                                               onDeleteOpClicked={props.onDeleteOpClicked}/>}\n        </div>\n    );\n}\n\nexport default DeleteButton;","import './Modal.css';\n\nfunction Modal(props){\n    let deleteType = \"\"\n\n    // for displaying the right text in the modal\n    if (props.deleteState === \"Completed\"){\n        deleteType = \"completed \";\n    } else if (props.deleteState === \"Uncompleted\"){\n        deleteType = \"uncompleted \";\n    }\n\n    return (\n        <div className=\"modal\">\n            <div className=\"modal-content\">\n                <p>Are you sure that you want to delete <b>all {deleteType}</b>tasks?</p>\n                <div id=\"modal-response\">\n                    <button type=\"button\" onClick={() => {\n                            props.resetDeleteOp();\n                            props.hideModal();\n                    }}>\n                        Cancel\n                    </button>\n                    <button id=\"delete-confirm-button\" type=\"button\" onClick={() => {\n                        props.onDeleteByCategory(props.deleteState);\n                        props.hideModal();\n                        props.resetDeleteDropup();  // reset the delete option and hide the reset dropup\n                    }}>\n                    Delete</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;","import './App.css';\nimport ItemList from \"./ItemList.js\";\nimport FilterButton from \"./FilterButton.js\";\nimport DeleteButton from \"./DeleteButton.js\";\nimport {useState} from \"react\";\nimport Modal from \"./Modal.js\";\n\nfunction App(props) {\n    const [toolSelected, setToolSelected] = useState(null);  // for the drop-up for filter and delete\n    const [filterState, setFilterState] = useState(\"All\");\n    const [deleteState, setDeleteState] = useState(null);\n    const [modalOn, setModalOn] = useState(null);\n\n    function handleToolSelected(tool_name){\n        // if you click on the same tool twice, it will deselect it\n        if (toolSelected === tool_name){\n            setToolSelected(null);\n        } else {\n            setToolSelected(tool_name);\n        }\n    }\n\n    function handleFilterSelected(toolOp){\n        if (filterState === toolOp){\n            setFilterState(\"All\");\n        } else {\n            setFilterState(toolOp);\n        }\n    }\n\n\n    return (\n      <div id=\"content\">\n        <h1 className=\"accent\">To-Do List</h1>\n        <ItemList {...props} filterState = {filterState}/>\n        <div id=\"tools\">\n            <FilterButton onToolClicked={() => {handleToolSelected(\"filter\")}}\n                          showDropUp = {\"filter\" === toolSelected}\n                          onFilterOpClicked={handleFilterSelected}\n                          filterState = {filterState}\n                          closeDropUp = {() => setToolSelected(null)}\n            />\n            <DeleteButton onToolClicked={() => {handleToolSelected(\"delete\")}}\n                          showDropUp = {\"delete\" === toolSelected}\n                          deleteState = {deleteState}\n                          onDeleteOpClicked = {(deleteOpName) => setDeleteState(deleteOpName)}\n                          displayModal={() => {setModalOn(true)}}\n            />\n        </div>\n          {modalOn && <Modal deleteState = {deleteState}\n                             resetDeleteOp = {() => setDeleteState(null)}\n                             hideModal={() => setModalOn(false)}\n                             onDeleteByCategory = {props.onDeleteByCategory}\n                             resetDeleteDropup={() => {\n                                 setToolSelected(null);  // reset the toolSelected state, so that the dropUp goes away\n                                 setDeleteState(null);  // reset the deleteState\n                             }}\n          />}\n      </div>\n  );\n}\n\nexport default App;\n","import {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport App from \"./App.js\";\n\nfunction InMemoryApp(props) {\n    const [data, setData] = useState(props.initialData);\n\n    function handleItemChanged(itemID, field, newValue){\n        function edit_helper(item) {\n            if (item.id === itemID){\n                item[field] = newValue;\n                return item;\n            }\n            else {\n                return item;\n            }\n        }\n        setData(data.map(edit_helper));\n    }\n\n    function handleItemDeleted(itemID) {\n        setData(data.filter((item) => item.id !== itemID));\n    }\n\n    function handleItemCategoryDeleted(category) {\n        // delete the item based on the category they are in\n        if (category === \"Completed\"){\n            setData(data.filter((item) => item.completed === false));\n        } else if (category === \"Uncompleted\") {\n            setData(data.filter((item) => item.completed === true));\n        } else if (category === \"All\") {\n            setData([]);\n        }\n    }\n\n    function handleItemAdded(){\n        let newId = generateUniqueID();\n        let newItem = [{id: newId, name: \"\", completed: false}];\n        setData(data.concat(newItem));\n\n        return newId;\n    }\n\n    return (<App data={data} onItemChanged={handleItemChanged}\n                 onItemDeleted={handleItemDeleted}\n                 onDeleteByCategory={handleItemCategoryDeleted}\n                 onItemAdded={handleItemAdded}/>);\n}\n\nexport default InMemoryApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from './InMemoryApp.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nlet initialData = [];\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <InMemoryApp initialData={initialData} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}